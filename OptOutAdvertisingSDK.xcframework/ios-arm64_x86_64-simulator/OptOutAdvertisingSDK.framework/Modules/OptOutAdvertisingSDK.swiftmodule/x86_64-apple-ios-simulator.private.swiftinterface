// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name OptOutAdvertisingSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import AdSupport
import AppTrackingTransparency
import Combine
import CoreLocation
import Foundation
import Network
import OMSDK_Pinchnl
@_exported import OptOutAdvertisingSDK
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public typealias NativeAdDetail = [Swift.String : Swift.String]
public struct AdDetail {
  public let adSlot: Swift.String
  public let width: Swift.Int
  public let height: Swift.Int
  public let html: Swift.String
  public let creativeID: Swift.String
  public let networkID: Swift.String
  public let networkName: Swift.String
  public let agencyID: Swift.String
  public let agencyName: Swift.String
  public let advertiserID: Swift.String
  public let advertiserName: Swift.String
  public let advertiserDomains: [Swift.String]
  public let noScaling: Swift.Bool
  public let noSafeFrame: Swift.Bool
  public let tags: [Swift.String]
}
public struct AdSlot {
  public let name: Swift.String
  public let customParams: [Swift.String : Swift.String]?
  public init(name: Swift.String, customParams: [Swift.String : Swift.String]? = nil)
}
public struct Environment {
}
@_Concurrency.MainActor @preconcurrency public struct OptOutAd : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency public init(adSlot: Swift.String, deeplinkToAdScreen: Swift.String? = nil, maxSize: CoreFoundation.CGSize? = nil, onLoad: ((OptOutAdvertisingSDK.AdDetail) -> Swift.Void)? = nil, onError: ((any Swift.Error) -> Swift.Void)? = nil, onHeightUpdate: ((CoreFoundation.CGFloat) -> Swift.Void)? = nil, onWidthUpdate: ((CoreFoundation.CGFloat) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: OptOutAdvertisingSDK.OptOutAd.Context) -> OptOutAdvertisingSDK.OptOutAdView
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ uiView: OptOutAdvertisingSDK.OptOutAdView, context: OptOutAdvertisingSDK.OptOutAd.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = OptOutAdvertisingSDK.OptOutAdView
}
public struct OptOutAdvertising {
  public static func initialize(publisherId: Swift.String, lazyLoadOffset: CoreFoundation.CGFloat = 200)
  public static func initialize(publisherId: Swift.String, environment: OptOutAdvertisingSDK.Environment, lazyLoadOffset: CoreFoundation.CGFloat = 200)
  public static func updateTransparencyAndConsent(isGdprRequired: Swift.Bool, tcfString: Swift.String)
  public static func registerMultipleAdSlots(adSlots: [OptOutAdvertisingSDK.AdSlot])
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class OptOutAdView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public func configure(adSlot: Swift.String, deeplinkToAdScreen: Swift.String? = nil, maxSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor @preconcurrency public func configure(adSlot: Swift.String, deeplinkToAdScreen: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency public func loadAd(completionHandler: ((_ ad: OptOutAdvertisingSDK.AdDetail) -> ())? = nil, failedHandler: ((_ error: any Swift.Error) -> ())? = nil)
  @_Concurrency.MainActor @preconcurrency public func addCustomParam(key: Swift.String, value: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func removeCustomParam(key: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func setOnHeightChangedListener(listener: @escaping (_ newHeight: CoreFoundation.CGFloat) -> ())
  @_Concurrency.MainActor @preconcurrency public func setOnWidthChangedListener(listener: @escaping (_ newHeight: CoreFoundation.CGFloat) -> ())
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_Concurrency.MainActor @preconcurrency public struct OptOutNativeAd<ViewType> : SwiftUI.UIViewRepresentable where ViewType : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(adSlot: Swift.String, customParameters: [Swift.String : Swift.String] = [:], deeplinkToAdScreen: Swift.String? = nil, onLoad: ((OptOutAdvertisingSDK.AdDetail) -> Swift.Void)? = nil, onError: ((any Swift.Error) -> Swift.Void)? = nil, viewFactory: @escaping (OptOutAdvertisingSDK.NativeAdDetail) -> ViewType)
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: OptOutAdvertisingSDK.OptOutNativeAd<ViewType>.Context) -> OptOutAdvertisingSDK.OptOutNativeAdView
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ uiView: OptOutAdvertisingSDK.OptOutNativeAdView, context: OptOutAdvertisingSDK.OptOutNativeAd<ViewType>.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = OptOutAdvertisingSDK.OptOutNativeAdView
}
public typealias OptOutNativeAdViewFactory = (OptOutAdvertisingSDK.NativeAdDetail) -> UIKit.UIView
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class OptOutNativeAdView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override final public func didMoveToSuperview()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency final public func configure(adSlot: Swift.String, customParamaters: [Swift.String : Swift.String] = [:], deeplinkToAdScreen: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency final public func loadAd(completionHandler: ((_ ad: OptOutAdvertisingSDK.AdDetail) -> ())? = nil, failedHandler: ((_ error: any Swift.Error) -> ())? = nil, viewFactory: @escaping OptOutAdvertisingSDK.OptOutNativeAdViewFactory)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension OptOutAdvertisingSDK.OptOutAd : Swift.Sendable {}
extension OptOutAdvertisingSDK.OptOutNativeAd : Swift.Sendable {}
